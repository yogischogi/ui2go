\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {3}Program Control}{9}{section.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Control Flow}{9}{subsection.3.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Control Flow in a common program. Even well designed programs have a tendency to end up looking like a plate full of spaghetti. }}{9}{figure.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces ui2go supports a circular control flow, where user input is transferred to the user interface and than to the program logic. The program logic updates the user interface, which is observed by the user.}}{10}{figure.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Events}{10}{subsection.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.1}General Idea}{10}{subsubsection.3.2.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Control flow in a hierarchical system. Events usually move upwards the hierarchy and commands move downwards. If you don't like the term module you can easily substitute it with department, military unit or even class. }}{12}{figure.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.2}Traditional Event Handling}{13}{subsubsection.3.2.2}}
\newlabel{callbackdesaster}{{3.2.3}{13}{Callback Disaster}{subsubsection.3.2.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.3}Callback Disaster}{13}{subsubsection.3.2.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Control flow in a single class. The callback style is confusing and hard to maintain. A single point of entry enables a more traditional and easier linear control flow.}}{15}{figure.4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.4}ui2go Solution}{15}{subsubsection.3.2.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Event Flow in a ui2go program. The events flow from the window down to the child widgets and after processing again back up to the main window. At any given point the program logic may be hooked into the event flow.}}{16}{figure.5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces An extremely simple program for painting.}}{17}{figure.6}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces The paint program uses a channel to handle mouse events from the canvas.}}{19}{figure.7}}
\@setckpt{control}{
\setcounter{page}{23}
\setcounter{equation}{0}
\setcounter{enumi}{4}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{section}{3}
\setcounter{subsection}{2}
\setcounter{subsubsection}{4}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{7}
\setcounter{table}{1}
\setcounter{Item}{42}
\setcounter{Hfootnote}{0}
\setcounter{bookmark@seq@number}{21}
\setcounter{LT@tables}{1}
\setcounter{LT@chunks}{2}
\setcounter{section@level}{3}
}
